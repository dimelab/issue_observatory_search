version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: issue_observatory_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-issue_observatory}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: issue_observatory_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: issue_observatory_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+psycopg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-issue_observatory}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production-min-32-chars}
      GOOGLE_CUSTOM_SEARCH_API_KEY: ${GOOGLE_API_KEY}
      GOOGLE_CUSTOM_SEARCH_ENGINE_ID: ${GOOGLE_CSE_ID}
      SERP_API_KEY: ${SERP_API_KEY}
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: development
      NETWORK_EXPORT_DIR: /app/data/networks
    ports:
      - "3111:8000"
    volumes:
      - .:/app
      - app_data:/app/data  # Named volume for application data
    command: >
      sh -c "
        . .venv/bin/activate &&
        mkdir -p /app/data/networks &&
        alembic upgrade head &&
        uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload
      "

  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: issue_observatory_celery_worker
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-issue_observatory}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GOOGLE_CSE_ID: ${GOOGLE_CSE_ID}
      SERP_API_KEY: ${SERP_API_KEY}
      NETWORK_EXPORT_DIR: /app/data/networks
    volumes:
      - ./backend:/app/backend
      - app_data:/app/data  # Share application data volume
    command: celery -A backend.tasks worker --loglevel=info

  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: issue_observatory_celery_beat
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-issue_observatory}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
    volumes:
      - ./backend:/app/backend
    command: celery -A backend.tasks beat --loglevel=info

  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: issue_observatory_flower
    depends_on:
      - redis
    environment:
      REDIS_URL: redis://redis:6379
    ports:
      - "5555:5555"
    command: celery -A backend.tasks flower --port=5555

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: issue_observatory_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    profiles:
      - tools

  # Optional: Nginx for production-like setup
  nginx:
    image: nginx:alpine
    container_name: issue_observatory_nginx
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./frontend/static:/var/www/static:ro
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: issue_observatory_network
